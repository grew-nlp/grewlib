ifeq (@DEP2PICT@,no)
PP = -pp 'camlp4o pa_macro.cmo -DDATA_DIR=\"$(DATA_DIR)\"'
else
PP = -pp 'camlp4o pa_macro.cmo -DDATA_DIR=\"$(DATA_DIR)\" -DDEP2PICT'
endif

OCAMLFLAGS= \
	str.cma bigarray.cma unix.cma -I +threads threads.cma dynlink.cma\
	$(CAIRO_BYTE) $(CAMOMILE_BYTE) $(XML_LIGHT_BYTE) $(ANSITERMINAL_BYTE) $(LOG_BYTE) $(DEP2PICT_BYTE)

OCAMLOPTFLAGS= \
	str.cmxa bigarray.cmxa unix.cmxa -I +threads threads.cmxa dynlink.cmxa\
	$(CAIRO_OPT) $(CAMOMILE_OPT) $(XML_LIGHT_OPT) $(ANSITERMINAL_OPT) $(LOG_OPT) $(DEP2PICT_OPT)

TARGET = libgrew_types.cmi libgrew.cmi libgrew.cma libgrew.cmxa
BASE = grew_base grew_types grew_ast parser_global gr_grs_parser lexer grew_parser grew_fs grew_edge grew_node grew_graph libgrew_types grew_command grew_rule grew_grs grew_html libgrew

CMO = $(BASE:%=%.cmo)
CMX = $(BASE:%=%.cmx)

all: $(TARGET)

libgrew.cmxa : $(CMX)
	$(OCAMLOPT) -a -o $@ $(CMX)

libgrew.cma : $(CMO)
	$(OCAMLC) -a -o $@ $(CMO)

include ../config/Makefile

# --------------------------------------------------------------------------
# Specific rules
SPECIFIC = gr_grs_parser.ml gr_grs_parser.mli lexer.ml
gr_grs_parser.ml: gr_grs_parser.mly
	$(MENHIR) --infer --ocamlc "$(OCAMLC) -c -I ." gr_grs_parser.mly
	@make gr_grs_parser.cmi # force the build NOW
gr_grs_parser.cmo: gr_grs_parser.ml
	$(OCAMLC) $(OCAMLFLAGS) -c $<
gr_grs_parser.cmx: gr_grs_parser.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -c $<

lexer.ml: lexer.mll
	$(OCAMLLEX) lexer.mll
lexer.cmo: lexer.ml
	$(OCAMLC) $(OCAMLFLAGS) -c $<
lexer.cmx: lexer.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -c $<

# --------------------------------------------------------------------------
# Common rules
.SUFFIXES: .ml .mli .cmo .cmi .cmx

.ml.cmo:
	$(OCAMLC) $(PP) $(OCAMLFLAGS) -c $<

.mli.cmi:
	$(OCAMLC) $(OCAMLFLAGS) -c $<

.ml.cmx:
	$(OCAMLOPT) $(PP) $(OCAMLOPTFLAGS) -c $<

# Clean up
clean:
	rm -f $(TARGET) $(TEST) $(SPECIFIC)
	rm -f *.cm[iox] *.[ao] *.annot
	rm -f .depend

purge:
	rm -f Makefile
	rm -rf doc

# Dependencies
depend: .depend

.depend:
	$(OCAMLDEP) $(PP) $(INCLUDES) *.mli *.ml > .depend

-include .depend
